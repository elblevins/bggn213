---
title: "Class7"
format: pdf
author: Liz
---

# K-means Clustering

Let's make up some data to cluster. 

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, 3) )
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```


```{r}
rev( c("a", "b", "c"))
```
The function to do k-means clustering in base R is called `kmeans()`. We give this our input data for clustering and the number of clusters we want `centers`. 

```{r}
km <- kmeans(x, centers=4, nstart=20)
km
```
>Q. What `component` of your result object details
-cluster size?




```{r}
km$cluster
```
center?
```{r}
km$center
```

cluster center as blue points
```{r}
plot(x, col= "blue")
```
```{r}
plot(x, col= km$cluster)
points(km$centers, col="blue", pch= 15, cex= 2)
```

# Hierarchial Clustering 

The `hclust()` function performs hierarchical clustering. The big advantage here is I don't need to tell it "k" the number of clusters. 
To run `hcluster()` I need to provide a distance 

```{r}
hc <- hclust( dist(x) )
hc
```
```{r}
plot(hc)
```
To get my "main" result (cluster members) I want to "cut" this tree to yields "branches" who's leaves are the members of the clusters. 
```{r}
grsp <- cutree(hc, k=2)
```

More often we will use `cutree()` with k=2 for example

Make a plot of our `hclust()` results i.e. our data colored bu cluster assignment!

```{r}
plot(x, col = grsp)
```

# Principal Component Analysis (PCA)

Read data for UK food trends from online 

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

```{r}
nrow(x)
ncol(x)
```
```{r}
head(x)
```
```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

```{r}
dim(x)
```

```{r}
x <- read.csv(url, row.names=1)
head(x)
```
```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```
```{r}
pairs(x, col=rainbow(10), pch=16)
```


```{r}
log2(20/20)
```
```{r}
log2(20/10)
```
```{r}
(20/10)
```

```{r}
log2(10/20)
```

##PCA to the rescue!

The main function in base R to do PCA is called `prcomp()`. One issue with the `prcomp()` function is that it expects the transpose of our data as input.


```{r}
t(x)
```

```{r}
pca <- prcomp( t(x) )
summary(pca)
```
The object returned by `prcomp()` has our results that include a $x component. This is our "scores" along the PCs (i.e. The plot our data along the new PC axis)
```{r}
plot(pca$x[,1], pca$x[,2], 
     xlab= "pc1", ylab= "pc2", 
     col=c("orange", "red", "blue","darkgreen"),
           pch=16)
```
```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```


```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```
```{r}
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

