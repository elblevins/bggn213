{
  "hash": "bf046587496bbcadcd6dea6668aa5131",
  "result": {
    "markdown": "---\ntitle: \"Class7\"\nformat: pdf\nauthor: Liz\n---\n\n\n# K-means Clustering\n\nLet's make up some data to cluster. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- c(rnorm(30, -3), rnorm(30, 3) )\nx <- cbind(x=tmp, y=rev(tmp))\nplot(x)\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrev( c(\"a\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"c\" \"b\" \"a\"\n```\n:::\n:::\n\nThe function to do k-means clustering in base R is called `kmeans()`. We give this our input data for clustering and the number of clusters we want `centers`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nkm <- kmeans(x, centers=4, nstart=20)\nkm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nK-means clustering with 4 clusters of sizes 13, 17, 17, 13\n\nCluster means:\n          x         y\n1 -2.057032  2.395831\n2 -3.672211  3.566410\n3  3.566410 -3.672211\n4  2.395831 -2.057032\n\nClustering vector:\n [1] 2 2 1 1 1 1 2 2 2 2 1 1 1 1 2 1 1 2 2 2 2 2 2 1 2 2 2 1 1 2 3 4 4 3 3 3 4 3\n[39] 3 3 3 3 3 4 4 3 4 4 4 4 3 3 3 3 4 4 4 4 3 3\n\nWithin cluster sum of squares by cluster:\n[1]  8.427895 26.731148 26.731148  8.427895\n (between_SS / total_SS =  94.2 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n```\n:::\n:::\n\n>Q. What `component` of your result object details\n-cluster size?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkm$cluster\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 1 1 1 1 2 2 2 2 1 1 1 1 2 1 1 2 2 2 2 2 2 1 2 2 2 1 1 2 3 4 4 3 3 3 4 3\n[39] 3 3 3 3 3 4 4 3 4 4 4 4 3 3 3 3 4 4 4 4 3 3\n```\n:::\n:::\n\ncenter?\n\n::: {.cell}\n\n```{.r .cell-code}\nkm$center\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          x         y\n1 -2.057032  2.395831\n2 -3.672211  3.566410\n3  3.566410 -3.672211\n4  2.395831 -2.057032\n```\n:::\n:::\n\n\ncluster center as blue points\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, col= \"blue\")\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, col= km$cluster)\npoints(km$centers, col=\"blue\", pch= 15, cex= 2)\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n# Hierarchial Clustering \n\nThe `hclust()` function performs hierarchical clustering. The big advantage here is I don't need to tell it \"k\" the number of clusters. \nTo run `hcluster()` I need to provide a distance \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhc <- hclust( dist(x) )\nhc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nhclust(d = dist(x))\n\nCluster method   : complete \nDistance         : euclidean \nNumber of objects: 60 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hc)\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\nTo get my \"main\" result (cluster members) I want to \"cut\" this tree to yields \"branches\" who's leaves are the members of the clusters. \n\n::: {.cell}\n\n```{.r .cell-code}\ngrsp <- cutree(hc, k=2)\n```\n:::\n\n\nMore often we will use `cutree()` with k=2 for example\n\nMake a plot of our `hclust()` results i.e. our data colored bu cluster assignment!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, col = grsp)\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n# Principal Component Analysis (PCA)\n\nRead data for UK food trends from online \n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://tinyurl.com/UK-foods\"\nx <- read.csv(url)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\nncol(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               X England Wales Scotland N.Ireland\n1         Cheese     105   103      103        66\n2  Carcass_meat      245   227      242       267\n3    Other_meat      685   803      750       586\n4           Fish     147   160      122        93\n5 Fats_and_oils      193   235      184       209\n6         Sugars     156   175      147       139\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(x) <- x[,1]\nx <- x[,-1]\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               England Wales Scotland N.Ireland\nCheese             105   103      103        66\nCarcass_meat       245   227      242       267\nOther_meat         685   803      750       586\nFish               147   160      122        93\nFats_and_oils      193   235      184       209\nSugars             156   175      147       139\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17  4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- read.csv(url, row.names=1)\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               England Wales Scotland N.Ireland\nCheese             105   103      103        66\nCarcass_meat       245   227      242       267\nOther_meat         685   803      750       586\nFish               147   160      122        93\nFats_and_oils      193   235      184       209\nSugars             156   175      147       139\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(x, col=rainbow(10), pch=16)\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog2(20/20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog2(20/10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(20/10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog2(10/20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n:::\n\n\n##PCA to the rescue!\n\nThe main function in base R to do PCA is called `prcomp()`. One issue with the `prcomp()` function is that it expects the transpose of our data as input.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Cheese Carcass_meat  Other_meat  Fish Fats_and_oils  Sugars\nEngland      105           245         685  147            193    156\nWales        103           227         803  160            235    175\nScotland     103           242         750  122            184    147\nN.Ireland     66           267         586   93            209    139\n          Fresh_potatoes  Fresh_Veg  Other_Veg  Processed_potatoes \nEngland               720        253        488                 198\nWales                 874        265        570                 203\nScotland              566        171        418                 220\nN.Ireland            1033        143        355                 187\n          Processed_Veg  Fresh_fruit  Cereals  Beverages Soft_drinks \nEngland              360         1102     1472        57         1374\nWales                365         1137     1582        73         1256\nScotland             337          957     1462        53         1572\nN.Ireland            334          674     1494        47         1506\n          Alcoholic_drinks  Confectionery \nEngland                 375             54\nWales                   475             64\nScotland                458             62\nN.Ireland               135             41\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npca <- prcomp( t(x) )\nsummary(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                            PC1      PC2      PC3       PC4\nStandard deviation     324.1502 212.7478 73.87622 4.189e-14\nProportion of Variance   0.6744   0.2905  0.03503 0.000e+00\nCumulative Proportion    0.6744   0.9650  1.00000 1.000e+00\n```\n:::\n:::\n\nThe object returned by `prcomp()` has our results that include a $x component. This is our \"scores\" along the PCs (i.e. The plot our data along the new PC axis)\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pca$x[,1], pca$x[,2], \n     xlab= \"pc1\", ylab= \"pc2\", \n     col=c(\"orange\", \"red\", \"blue\",\"darkgreen\"),\n           pch=16)\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar=c(10, 3, 0.35, 0))\nbarplot( pca$rotation[,1], las=2 )\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )\nv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 67 29  4  0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- summary(pca)\nz$importance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             PC1       PC2      PC3          PC4\nStandard deviation     324.15019 212.74780 73.87622 4.188568e-14\nProportion of Variance   0.67444   0.29052  0.03503 0.000000e+00\nCumulative Proportion    0.67444   0.96497  1.00000 1.000000e+00\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(v, xlab=\"Principal Component\", ylab=\"Percent Variation\")\n```\n\n::: {.cell-output-display}\n![](Class7_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "Class7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}